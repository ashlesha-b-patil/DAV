



    # # Q3) (1) Linear Regression

    # Step 1: Import Libraries

    # In[2]:


    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LinearRegression
    from sklearn.metrics import mean_squared_error, r2_score


    # Step 2: Load the Dataset

    # In[31]:


    # Load dataset (Example: Boston Housing Dataset)
    import pandas as pd

    # Load dataset from CSV
    data = pd.read_csv('boston.csv')
    # Display the first few rows of the dataset
    print(data.head())


    # Step 3: Prepare the Data

    # In[10]:


    X = data.drop('medv', axis=1)
    y = data['medv']


    # Step 4: Split the Data

    # In[12]:


    X_train, X_test, y_train, y_test = train_test_split(X, y,
    test_size=0.2, random_state=42)


    # Step 5: Train the Model

    # In[13]:


    # Create the linear regression model
    model = LinearRegression()
    # Train the model
    model.fit(X_train, y_train)
    LinearRegression()


    # Step 6: Make Predictions

    # In[15]:


    # Make predictions
    y_pred = model.predict(X_test)


    # Step 7: Evaluate the Model

    # In[16]:


    # Calculate Mean Squared Error (MSE)
    mse = mean_squared_error(y_test, y_pred)
    print('Mean Squared Error:', mse)
    # Calculate R-squared (RÂ²) score
    r2 = r2_score(y_test, y_pred)
    print('R-squared:', r2)


    # Step 8: Visualize the Results

    # In[17]:


    # Scatter plot of actual vs predicted
    plt.scatter(y_test, y_pred)
    plt.xlabel('Actual Prices')
    plt.ylabel('Predicted Prices')
    plt.title('Actual vs Predicted Prices')
    # Add the linear regression line (45-degree line)
    plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)],
    color='red', linestyle='--')
    plt.show()

          crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \
    0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   
    1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   
    2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   
    3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   
    4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   

            b  lstat  medv  
    0  396.90   4.98  24.0  
    1  396.90   9.14  21.6  
    2  392.83   4.03  34.7  
    3  394.63   2.94  33.4  
    4  396.90   5.33  36.2  
    Mean Squared Error: 24.291119474973613
    R-squared: 0.6687594935356307

[]
